diff --git a/node_modules/@types/jsts/index.d.ts b/node_modules/@types/jsts/index.d.ts
index 1ddc491..3996972 100644
--- a/node_modules/@types/jsts/index.d.ts
+++ b/node_modules/@types/jsts/index.d.ts
@@ -115,11 +115,45 @@ declare namespace jsts {
             */
             createPolygon(shell: LinearRing, holes: Array<LinearRing>): Polygon;      
                   
+            /**
+            * Creates a GeometryCollection using the given Geometries; a null or empty array will create an empty GeometryCollection.
+            *
+            * @param {Geometry[]} An array of Geometries, each of which may be empty but not null, or null.
+            * @return {GeometryCollection} an array of Geometries, each of which may be empty but not null, or null.
+            */
+           createGeometryCollection(geometries?: Array<Geometry>): GeometryCollection;            
+
         }
 
         export class GeometryCollection extends jsts.geom.Geometry {
 
             constructor(geometries?: Array<Geometry>, factory?: GeometryFactory);
+
+        }
+
+        /**
+         * Iterates over all Geometrys in a {@link Geometry}, (which may be either a collection or an atomic geometry). 
+         * The iteration sequence follows a pre-order, depth-first traversal of the structure of the {@link GeometryCollection} 
+         *  (which may be nested). The original {@link Geometry} object is returned as well (as the first object), 
+         * as are all sub-collections and atomic elements. It is simple to ignore the intermediate 
+         * {@link GeometryCollection} objects if they are not needed.
+         */
+        export class GeometryCollectionIterator {
+
+            constructor(parent: Geometry);
+            /**
+            * Tests whether any geometry elements remain to be returned.
+            *
+            * @return {boolean} atrue if more geometry elements remain.
+            */
+           hasNext():boolean;
+            /**
+            * Gets the next geometry in the iteration sequence.
+            *
+            * @return {Geometry} the next geometry in the iteration.
+            */
+           next():Geometry;
+
         }
 
         /**
@@ -719,6 +753,35 @@ declare namespace jsts {
              */
             getNumPoints(): number;
 
+            /**
+             * Gets the user data object for this geometry, if any.
+             * 
+             * @return {Object} the user data object, or null if none set
+             */
+            getUserData():Object;
+
+            /**
+             * Creates a deep copy of this Geometry object. Coordinate sequences contained in it are copied. 
+             * All instance fields are copied (i.e. envelope, SRID and userData).
+             * 
+             * NOTE: the userData object reference (if present) is copied, but the value itself is not copied. 
+             * If a deep copy is required this must be performed by the caller.
+             * 
+             * @return {Geometry} a deep copy of this geometry  
+             */
+            copy():Geometry;
+
+            /**
+             * A simple scheme for applications to add their own custom data to a Geometry. 
+             * An example use might be to add an object representing a Coordinate Reference System.
+             * 
+             * Note that user data objects are not present in geometries created by construction methods.
+             * 
+             * @param {Object} userData an object, the semantics for which are defined by the application using this Geometry
+             */
+            setUserData(userData: Object);
+
+
             /**
              * Tests whether this {@link Geometry} is simple. In general, the SFS
              * specification of simplicity follows the rule:
@@ -1350,7 +1413,7 @@ declare namespace jsts {
              * @throws IllegalArgumentException
              *           if either input is a non-empty GeometryCollection
              */
-            union(other: Geometry): Geometry;
+            union(other?: Geometry): Geometry;
 
             /**
              * Computes a <code>Geometry</code> representing the points making up this
@@ -2322,6 +2385,112 @@ declare namespace jsts {
         }
     }
 
+    namespace util {
+        /**
+         * Computes various kinds of common geometric shapes. 
+         * Provides various ways of specifying the location and extent and rotations of the generated shapes,
+         * as well as number of line segments used to form them.
+         */
+        export class GeometricShapeFactory {
+            constructor(geometryFactory?: jsts.geom.GeometryFactory);
+            /**
+             * Creates an elliptical arc, as a LineString.
+             * 
+             * @param {number} startAng 
+             * @param {number} angExtent 
+             */
+            createArc(startAng:number, angExtent:number):jsts.geom.LineString;
+            
+            /**
+             * Creates an elliptical arc polygon.
+             * @param startAng 
+             * @param angExtent 
+             */
+            createArcPolygon(startAng:number,angExtent:number):jsts.geom.Polygon;
+            
+            /**
+             * Creates a circular or elliptical Polygon.
+             */
+            createCircle():jsts.geom.Polygon;
+            
+            /**
+             * Creates an elliptical Polygon.
+             */
+            createEllipse():jsts.geom.Polygon;
+            
+            /**
+             * Creates a rectangular Polygon.
+             */
+            createRectangle():jsts.geom.Polygon;
+            
+            /**
+             * Creates a squircular Polygon.
+             */
+            createSquircle():jsts.geom.Polygon;
+            
+            /**
+             * Creates a supercircular Polygon of a given positive power.
+             * @param power 
+             */
+            createSupercircle(power:number):Polygon;
+            
+            /**
+             * Sets the location of the shape by specifying the base 
+             * coordinate (which in most cases is the lower left point of the envelope containing the shape).
+             * @param base 
+             */
+            setBase(base:jsts.geom.Coordinate):void;
+            
+            /**
+             * Sets the location of the shape by specifying the centre of the shape's bounding box
+             * 
+             * @param centre 
+             */
+            setCentre(centre:jsts.geom.Coordinate):void;
+            
+            /**
+             * 
+             * @param env 
+             */
+            setEnvelope(env:jsts.geom.Envelope):void;
+
+            /**
+             * Sets the height of the shape.
+             * 
+             * @param height 
+             */
+            setHeight(height:number):void;
+            
+            /**
+             * Sets the total number of points in the created Geometry.
+             * 
+             * @param nPts 
+             */
+            setNumPoints(nPts:number):void;
+            
+            /**
+             * Sets the rotation angle to use for the shape.
+             * 
+             * @param radians 
+             */
+            setRotation(radians:number):void;
+            
+            /**
+             * Sets the size of the extent of the shape in both x and y directions.
+             * 
+             * @param size 
+             */
+            setSize(size:number):void;
+            
+            /**
+             * Sets the width of the shape.    
+             * @param width 
+             */
+            setWidth(width:number):void;
+                    
+        }
+    }
+
     namespace io {
 
 
